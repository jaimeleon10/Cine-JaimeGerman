-- Database: Tablas y Operaciones CRUD

-- Tabla de productos
CREATE TABLE IF NOT EXISTS ProductoEntity (
    id INTEGER PRIMARY KEY,
    tipo TEXT NOT NULL,
    precio REAL NOT NULL,
    stock INTEGER NOT NULL,
    created_at TEXT DEFAULT CURRENT_TIMESTAMP,
    updated_at TEXT DEFAULT CURRENT_TIMESTAMP,
    is_deleted TEXT DEFAULT "false"
);

-- Tabla de Clientes
CREATE TABLE IF NOT EXISTS ClienteEntity (
      id INTEGER PRIMARY KEY,
      nombre TEXT NOT NULL,
      email TEXT NOT NULL,
      numSocio TEXT NOT NULL UNIQUE,
      created_at TEXT NOT NULL,
      updated_at TEXT NOT NULL,
      is_deleted INTEGER NOT NULL DEFAULT 0
);

-- Operaciones CRUD para la tabla de Clientes
removeAllClientes:
DELETE FROM ClienteEntity;

selectAllClientes:
SELECT * FROM ClienteEntity;

selectClienteByNumSocio:
SELECT * FROM ClienteEntity WHERE numSocio = ?;

selectClienteById:
SELECT * FROM ClienteEntity WHERE id = ?;

selectAllClientesByIsDeleted:
SELECT * FROM ClienteEntity WHERE is_deleted = ?;

selectClienteLastInserted:
SELECT * FROM ClienteEntity WHERE id = last_insert_rowid();

insertCliente:
INSERT INTO ClienteEntity (nombre, email, numSocio, created_at, updated_at) VALUES (?, ?, ?, ?, ?);

updateCliente:
UPDATE ClienteEntity SET nombre = ?, email = ?, numSocio = ?, updated_at = ?, is_deleted = ? WHERE id = ?;

deleteCliente:
DELETE FROM ClienteEntity WHERE id = ?;



-- Tabla de Ventas
CREATE TABLE IF NOT EXISTS VentaEntity (
    id TEXT PRIMARY KEY,
    cliente_id INTEGER NOT NULL REFERENCES ClienteEntity(id),
    total REAL NOT NULL,
    fecha_compra TEXT NOT NULL,
    created_at TEXT NOT NULL,
    updated_at TEXT NOT NULL,
    is_deleted INTEGER NOT NULL DEFAULT 0
);

-- Operaciones CRUD para la tabla de Ventas
removeAllVentas:
DELETE FROM VentaEntity;

selectAllVentas:
SELECT * FROM VentaEntity;

selectVentaById:
SELECT * FROM VentaEntity WHERE id = ?;

existsVenta:
SELECT COUNT(*) > 0 AS es_mayor_cero FROM VentaEntity WHERE id = ?;

selectAllVentasByIsDeleted:
SELECT * FROM VentaEntity WHERE is_deleted = ?;

selectVentaLastInserted:
SELECT * FROM VentaEntity WHERE id = last_insert_rowid();

insertVenta:
INSERT INTO VentaEntity (id, cliente_id, total, fecha_compra, created_at, updated_at) VALUES (?, ?, ?,?, ?, ?);

updateVenta:
UPDATE VentaEntity SET cliente_id = ?, total = ?, fecha_compra = ?, updated_at = ?, is_deleted = ? WHERE id = ?;

deleteVenta:
DELETE FROM VentaEntity WHERE id = ?;

selectVentasByDate:
SELECT * FROM VentaEntity WHERE fecha_compra = ?;



-- Tabla de Lineas de Ventas
CREATE TABLE IF NOT EXISTS LineaVentaEntity (
     id TEXT PRIMARY KEY,
     venta_id TEXT NOT NULL REFERENCES VentaEntity(id),
     producto_id TEXT NOT NULL REFERENCES ProductoEntity(id),
     producto_tipo TEXT NOT NULL,
     cantidad INTEGER NOT NULL,
     precio REAL NOT NULL,
     created_at TEXT NOT NULL,
     updated_at TEXT NOT NULL,
     is_deleted INTEGER NOT NULL DEFAULT 0
);

-- Operaciones CRUD para la tabla de Lineas de Ventas
removeAllLineasVentas:
DELETE FROM LineaVentaEntity;

selectAllLineasVentas:
SELECT * FROM LineaVentaEntity;

selectLineaVentaById:
SELECT * FROM LineaVentaEntity WHERE id = ?;

selectAllLineasVentaByVentaId:
SELECT * FROM LineaVentaEntity WHERE venta_id = ?;

selectAllLineasVentasByIsDeleted:
SELECT * FROM LineaVentaEntity WHERE is_deleted = ?;

selectLineaVentaLastInserted:
SELECT * FROM LineaVentaEntity WHERE id = last_insert_rowid();

insertLineaVenta:
INSERT INTO LineaVentaEntity (id, venta_id, producto_id, producto_tipo, cantidad, precio, created_at, updated_at) VALUES (?, ?, ?, ?, ?,?, ?, ?);

updateLineaVenta:
UPDATE LineaVentaEntity SET venta_id = ?, producto_id = ?, producto_tipo = ?,  cantidad = ?, precio = ?, updated_at = ?, is_deleted = ? WHERE id = ?;

deleteLineaVenta:
DELETE FROM LineaVentaEntity WHERE id = ?;